version: '3.7'

volumes:
  grafana_data:
    driver: local

services:

  rq_exporter:
    build:
      context: .
      dockerfile: Dockerfile
    image: rq-exporter:latest
    # Override Gunicorn command line options
    # command: "-b 0.0.0.0:8080 --threads 2 --log-level debug"
    ports:
      - target: 8000
        published: 8000
        protocol: tcp
        mode: host
    environment:
      RQ_REDIS_HOST: "redis"
      RQ_REDIS_PASS: "123456"
    volumes:
      # Mount the package for development
      - type: bind
        source: ./rq_exporter
        target: /app/rq_exporter
    depends_on:
      - redis

  redis:
    image: redis:5.0-alpine
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    command:
      - redis-server
      - --bind 0.0.0.0
      - --requirepass 123456
      - --loglevel notice

  # RQ workers
  # To run multiple replicas use:
  # docker-compose --compatibility up
  worker:
    image: rq-exporter:latest
    entrypoint: []
    command: rq worker high default low --url redis://:123456@redis:6379/0
    working_dir: /home/worker
    volumes:
      # Mount a sample project
      - type: bind
        source: ./docker-compose/project
        target: /home/worker
    depends_on:
      - redis
      - rq_exporter
    deploy:
      replicas: 2

  # Enqueue jobs for testing
  enqueue:
    image: rq-exporter:latest
    entrypoint: []
    command: python -u enqueue.py
    environment:
      RQ_REDIS_HOST: "redis"
      RQ_REDIS_PASS: "123456"
    working_dir: /home/enqueue
    volumes:
      # Mount a sample project
      - type: bind
        source: ./docker-compose/project
        target: /home/enqueue
    depends_on:
      - redis
      - rq_exporter

  # RQ dashboard
  # https://github.com/Parallels/rq-dashboard
  dashboard:
    image: eoranged/rq-dashboard
    command: -u redis://:123456@redis:6379/0
    ports:
      - target: 9181
        published: 9181
        protocol: tcp
        mode: host
    depends_on:
      - redis

  prometheus:
    image: prom/prometheus:v2.17.2
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    volumes:
      # Prometheus config file
      - type: bind
        source: ./docker-compose/prometheus.yml
        target: /etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:6.7.3
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      # Grafana datasources
      # https://grafana.com/docs/grafana/latest/administration/provisioning/#datasources
      - type: bind
        source: ./docker-compose/grafana-datasources.yml
        target: /etc/grafana/provisioning/datasources/datasources.yaml
      # Grafana dashboards config
      # https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards
      - type: bind
        source: ./docker-compose/grafana-dashboards.yml
        target: /etc/grafana/provisioning/dashboards/dashboards.yaml
      # # RQ dashboard
      - type: bind
        source: ./grafana/rq-dashboard.json
        target: /etc/grafana/dashboards/rq-dashboard.json
      # Grafana data
      - type: volume
        source: grafana_data
        target: /var/lib/grafana
